import typing

curated_keywords: typing.List[typing.Union[str, typing.Tuple[str, ...]]] = [
    (
        "learning from demonstration",  # not a detected keyword
        "inverse reinforcement learning",
        "expert demonstrations",
        "apprenticeship learning",
        "imitation",
        "imitation learning",
        "demonstrated trajectories",
        "demonstration",
        "demonstrations",
        "human demonstration",
        "human teacher",
        "helicopters",
        "autonomous helicopter control",
    ),
    ("cognitive sciences", "cognitive science"),
    (
        "visual perception",
        "computer vision",
        "vision",
        "image classification",
        "visual features",
        "visual feedback",
        "visual information",
        "perception",
        "pixels",
        "object detection",
        "object localization",
        "object recognition",
        "object segmentation",
        "robot vision",
        "raw images",
        "visual image features",
        "object recognition",
        "images",
        "image",
    ),
    ("contact dynamics", "tactile sensors", "grasp"),
    # ( # too broad
    #     "control",
    #     "control theory",
    #     "control algorithms",
    #     "control policies",
    #     "control problems",
    #     "control signals",
    #     "control systems",
    #     "controller",
    #     "controllers",
    #     "continuous control",
    #     "feedback",
    #     "feedback control",
    #     "robot control",
    #     "robotic control",
    # ),
    # ( # too broad
    #     "convolutional neural networks",
    #     "convolutional networks",
    #     "deep convolutional neural networks",
    # ),
    "dynamic programming",
    (
        "dynamical systems",
        "dynamic systems",
        "dynamics",
        "dynamics models",
        "nonlinear dynamical systems",
        "system dynamics",
        "robot dynamics",
    ),
    (
        "evolution",  # these categories are just kinda small on their own
        "evolutionary computation",
    ),
    ("genetic algorithms", "genetic"),
    (
        "gaussians",
        "gaussian distributions",
        "gaussian processes",
        "gaussian",
        "gaussian noise",
    ),
    # (
    #     "gradients",
    #     "gradient",
    #     "gradient methods",
    #     "gradient descent",
    #     "stochastic gradient descent",
    # ),
    ("humanoid robotics", "humanoid robot", "humanoid robots",),
    ("locomotion", "walking", "gait", "gaits"),
    # ( # too broad
    #     "machine learning",
    #     "machine learning methods",
    #     "machine learning research",
    #     "machine learning techniques",
    # ),
    # ("markov", "hidden markov models", "markov decision processes",),
    ("mobile robots", "navigation", "localization",),
    # (
    #     "motor learning",
    #     "motor skills",
    #     "motor commands",
    #     "motor control",
    #     "motor primitives",
    #     "deep visuomotor policies",
    #     "sensorimotor control",
    # ),
    (
        "neural networks",
        "neural network",
        "neural network policies",
        "deep neural networks",
        "artificial neural networks",
        "deep learning",
        "deep networks",
    ),
    ("nonlinear systems", "nonlinear dynamical systems",),
    # ("online learning"),
    (
        "optimal control",
        "optimal control problems",
        "model predictive control",
        "stochastic optimal control",
        "optimal trajectories",
        "linear quadratic regulator",
    ),
    (
        "trajectory optimization",
        "robot trajectory optimization",
        "guided policy search",
    ),
    (
        "planning",
        "plans",
        "motion planning",
        "trajectory planning",
        "movement primitives",
    ),
    (
        "policy gradients",
        "policy gradient",
        "policy gradient methods",
        "policy gradient reinforcement",
        "policy gradient reinforcement learning",
        "trust region policy optimization",
        "proximal policy optimization",
    ),
    (
        "probabilistic models",
        "probability",
        "probabilistic",
        "probabilistic inference",
        "probability distributions",
        "bayes",
        "bayesian",
        "bayesian inference",
    ),
    ("legged robots", "quadruped robots", "bipeds", "walker", "walking",),
    # ("real data", "real images", "real robots", "physical systems",),
    # ("recurrent neural networks"), # too rare :(
    (
        "reinforcement learning",
        # "reinforcement",
        "reinforcement learning algorithms",
        "reinforcement learning methods",
        # "reinforcement learning policy search methods",
        # "deep reinforcement",
        "deep reinforcement learning",
        # "agents",
        # "rl algorithms",
        # "rl methods",
        # "q learning",
        # "barto",
        # "sutton",
        # "hierarchical reinforcement learning",
        # "value functions",
        # "value function",
        # "value function approximation",
        # "value iteration",
    ),
    # ( # uninteresting, overlaps a ton with rl, policy gradients, etc
    #     "policy learning",
    #     "policy",
    #     "policies",
    #     "policy improvement",
    #     "policy invariance",
    #     "policy iteration",
    #     "policy optimization",
    #     "policy search",
    #     "policy search methods",
    #     "covariant policy search",
    # ),
    # ( # too much overlap with rl
    #     "reward functions",
    #     "reward",
    #     "reward function",
    #     "rewards",
    #     "a reward function",
    #     "expected reward",
    #     "delayed rewards",
    #     "sparse rewards",
    #     "advantage",
    # ),
    (
        "manipulation",
        "robotic manipulation",
        "robot manipulation",
        "grasping",
        "grasping",
        "grasping objects",
        "grasping points",
        "grasps",
        "robotic grasping",
        "grasp",
    ),
    ("state estimation", "kalman", "estimation", "filtering"),
    # ( # commenting out because uninteresting
    #     "supervised learning",
    #     "supervised learning methods",
    #     "regression",
    #     "classification",
    # ),
    (
        "unsupervised learning",
        # "representation", # vague
        # "representations",
        "deep generative models",
        "generative models",
    ),
]
"""list: List of keyword groups."""

curated_keyword_map: typing.Dict[str, str] = {}
"""dict: Map from keyword name to nominal keyword name."""

for group in curated_keywords:
    if isinstance(group, str):
        curated_keyword_map[group] = group
        continue

    nominal = group[0]
    for keyword in group:
        curated_keyword_map[keyword] = nominal
